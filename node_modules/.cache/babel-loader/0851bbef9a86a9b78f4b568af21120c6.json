{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === item.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        //We keep all the items where the id doesn't match that one id we are trying to remove\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/Users/sofyanagaslaeva/Desktop/React2021/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC7BE,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAE;AACbC,IAAAA,KAAK,EAAE,EADM;AAEbC,IAAAA,aAAa,EAAE;AAFF,GAFe;AAM7BC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYD,IAAI,CAACC,EAA1C,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACO,YAAL,EAAmB;AAClBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AAChBD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADI;AAEhBE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFC;AAGhBC,UAAAA,QAAQ,EAAE,CAHM;AAIhBC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJJ;AAKhBf,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AALE,SAAjB;AAOA,OARD,MAQO;AACNR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACA;AACD,KAjBQ;;AAkBTI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACjC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAIO,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAgC;AAC/B;AACAV,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAWA,EAAtC,CAAd;AACA,OAHD,MAGO;AACNH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACA;AACD;;AA7BQ;AANmB,CAAD,CAA7B;AAuCA,OAAO,MAAMM,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AAEP,eAAevB,SAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState: {\n\t\titems: [],\n\t\ttotalQuantity: 0\n\t},\n\treducers: {\n\t\taddItemToCart(state, action) {\n\t\t\tconst newItem = action.payload;\n\t\t\tconst existingItem = state.items.find(item => item.id === item.id);\n\t\t\tstate.totalQuantity++;\n\t\t\tif (!existingItem) {\n\t\t\t\tstate.items.push({\n\t\t\t\t\tid: newItem.id, \n\t\t\t\t\tprice: newItem.price, \n\t\t\t\t\tquantity: 1, \n\t\t\t\t\ttotalPrice: newItem.price,\n\t\t\t\t\tname: newItem.title\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\texistingItem.quantity++;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice + newItem.price;\n\t\t\t}\n\t\t},\n\t\tremoveItemFromCart(state, action) {\n\t\t\tconst id = action.payload;\n\t\t\tconst existingItem = state.items.find(item => item.id === id);\n\t\t\tstate.totalQuantity--;\n\t\t\tif (existingItem.quantity === 1){\n\t\t\t\t//We keep all the items where the id doesn't match that one id we are trying to remove\n\t\t\t\tstate.items = state.items.filter(item => item.id !==id);\n\t\t\t} else {\n\t\t\t\texistingItem.quantity--;\n\t\t\t\texistingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}