{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      //!!! Redux toolkit uses a package that will detect cases like this and clone state instead of changing the existing one\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase() {},\n\n    toggleCounter() {}\n\n  }\n});\n\nconst counterReducer = (state = initialState, action) => {\n  //We override the old state, return brand new object, not mutate it or change existing state\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["/Users/sofyanagaslaeva/Desktop/React2021/src/store/index.js"],"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","toggleCounter","counterReducer","action","type","amount","store"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAEAH,WAAW,CAAC;AACXI,EAAAA,IAAI,EAAE,SADK;AAEXH,EAAAA,YAAY,EAAEA,YAFH;AAGXI,EAAAA,QAAQ,EAAE;AACTC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAChB;AACAA,MAAAA,KAAK,CAACL,OAAN;AACA,KAJQ;;AAKTM,IAAAA,SAAS,CAACD,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACL,OAAN;AACA,KAPQ;;AAQTO,IAAAA,QAAQ,GAAG,CAAE,CARJ;;AASTC,IAAAA,aAAa,GAAG,CAAE;;AATT;AAHC,CAAD,CAAX;;AAgBA,MAAMC,cAAc,GAAG,CAACJ,KAAK,GAACN,YAAP,EAAqBW,MAArB,KAAgC;AAEtD;AACA,MAAGA,MAAM,CAACC,IAAP,KAAgB,WAAnB,EAAgC;AAC/B,WAAO;AACNX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADnB;AAENC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFb,KAAP;AAIA;;AAED,MAAGS,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA+B;AAC9B,WAAO;AACNX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgBU,MAAM,CAACE,MAD1B;AAENX,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFb,KAAP;AAIA;;AAGD,MAAGS,MAAM,CAACC,IAAP,KAAgB,WAAnB,EAAgC;AAC/B,WAAO;AACNX,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADnB;AAENC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFb,KAAP;AAIA;;AAED,MAAGS,MAAM,CAACC,IAAP,KAAgB,QAAnB,EAA6B;AAC5B,WAAO;AACNV,MAAAA,WAAW,EAAE,CAACI,KAAK,CAACJ,WADd;AAEND,MAAAA,OAAO,EAAEK,KAAK,CAACL;AAFT,KAAP;AAIA;;AACD,SAAOK,KAAP;AAEA,CAjCD;;AAmCA,MAAMQ,KAAK,GAAGhB,WAAW,CAACY,cAAD,CAAzB;AAEA,eAAeI,KAAf","sourcesContent":["import {createStore} from 'redux';\nimport {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter: true };\n\ncreateSlice({\n\tname: 'counter',\n\tinitialState: initialState,\n\treducers: {\n\t\tincrement(state) {\n\t\t\t//!!! Redux toolkit uses a package that will detect cases like this and clone state instead of changing the existing one\n\t\t\tstate.counter++;\n\t\t},\n\t\tdecrement(state) {\n\t\t\tstate.counter--;\n\t\t},\n\t\tincrease() {},\n\t\ttoggleCounter() {}\n\t}\n})\n\nconst counterReducer = (state=initialState, action) => {\n\n\t//We override the old state, return brand new object, not mutate it or change existing state\n\tif(action.type === 'increment') {\n\t\treturn {\n\t\t\tcounter: state.counter + 1,\n\t\t\tshowCounter: state.showCounter\n\t\t}\n\t}\n\n\tif(action.type === 'increase') {\n\t\treturn {\n\t\t\tcounter: state.counter + action.amount,\n\t\t\tshowCounter: state.showCounter\n\t\t}\n\t}\n\n\n\tif(action.type === 'decrement') {\n\t\treturn {\n\t\t\tcounter: state.counter - 1,\n\t\t\tshowCounter: state.showCounter\n\t\t}\n\t}\n\n\tif(action.type === 'toggle') {\n\t\treturn {\n\t\t\tshowCounter: !state.showCounter,\n\t\t\tcounter: state.counter\n\t\t}\n\t}\n\treturn state;\n\n}\n\nconst store = createStore(counterReducer);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}