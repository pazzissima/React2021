{"ast":null,"code":"import { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    //These are unique action identifiers\n    increment(state) {\n      //!!! Redux toolkit uses a package that will detect cases like this and \n      //clone state instead of changing the existing one\n      //This is mutable-looking way but not mutable\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/sofyanagaslaeva/Desktop/React2021/src/store/index.js"],"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","store","reducer","counterActions","actions"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,cAArB,QAA0C,kBAA1C;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,SAD0B;AAEhCJ,EAAAA,YAAY,EAAEA,YAFkB;AAGhCK,EAAAA,QAAQ,EAAE;AACT;AACAC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAChB;AACA;AACA;AACAA,MAAAA,KAAK,CAACN,OAAN;AACA,KAPQ;;AAQTO,IAAAA,SAAS,CAACD,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACN,OAAN;AACA,KAVQ;;AAWTQ,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACvBH,MAAAA,KAAK,CAACN,OAAN,GAAgBM,KAAK,CAACN,OAAN,GAAgBS,MAAM,CAACC,OAAvC;AACA,KAbQ;;AAcTC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACpBA,MAAAA,KAAK,CAACL,WAAN,GAAoB,CAACK,KAAK,CAACL,WAA3B;AACA;;AAhBQ;AAHsB,CAAD,CAAhC;AAuBA,MAAMW,KAAK,GAAGd,cAAc,CAAC;AAC5Be,EAAAA,OAAO,EAAEX,YAAY,CAACW;AADM,CAAD,CAA5B;AAIA,OAAO,MAAMC,cAAc,GAAGZ,YAAY,CAACa,OAApC;AACP,eAAeH,KAAf","sourcesContent":["import {createSlice, configureStore} from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter: true };\n\nconst counterSlice = createSlice({\n\tname: 'counter',\n\tinitialState: initialState,\n\treducers: {\n\t\t//These are unique action identifiers\n\t\tincrement(state) {\n\t\t\t//!!! Redux toolkit uses a package that will detect cases like this and \n\t\t\t//clone state instead of changing the existing one\n\t\t\t//This is mutable-looking way but not mutable\n\t\t\tstate.counter++;\n\t\t},\n\t\tdecrement(state) {\n\t\t\tstate.counter--;\n\t\t},\n\t\tincrease(state, action) {\n\t\t\tstate.counter = state.counter + action.payload;\n\t\t},\n\t\ttoggleCounter(state) {\n\t\t\tstate.showCounter = !state.showCounter;\n\t\t}\n\t}\n});\n\nconst store = configureStore({\n\treducer: counterSlice.reducer\n})\n\nexport const counterActions = counterSlice.actions;\nexport default store;"]},"metadata":{},"sourceType":"module"}