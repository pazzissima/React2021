{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: 'counter',\n  initialState: initialState,\n  reducers: {\n    increment() {},\n\n    decrement() {},\n\n    increase() {},\n\n    toggleCounter() {}\n\n  }\n});\n\nconst counterReducer = (state = initialState, action) => {\n  //We override the old state, return brand new object, not mutate it or change existing state\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n\n  return state;\n};\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["/Users/sofyanagaslaeva/Desktop/React2021/src/store/index.js"],"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","decrement","increase","toggleCounter","counterReducer","state","action","type","amount","store"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB;AAEAH,WAAW,CAAC;AACXI,EAAAA,IAAI,EAAE,SADK;AAEXH,EAAAA,YAAY,EAAEA,YAFH;AAGXI,EAAAA,QAAQ,EAAE;AACTC,IAAAA,SAAS,GAAG,CAAE,CADL;;AAETC,IAAAA,SAAS,GAAG,CAAE,CAFL;;AAGTC,IAAAA,QAAQ,GAAG,CAAE,CAHJ;;AAITC,IAAAA,aAAa,GAAG,CAAE;;AAJT;AAHC,CAAD,CAAX;;AAWA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAACV,YAAP,EAAqBW,MAArB,KAAgC;AAEtD;AACA,MAAGA,MAAM,CAACC,IAAP,KAAgB,WAAnB,EAAgC;AAC/B,WAAO;AACNX,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgB,CADnB;AAENC,MAAAA,WAAW,EAAEQ,KAAK,CAACR;AAFb,KAAP;AAIA;;AAED,MAAGS,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA+B;AAC9B,WAAO;AACNX,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgBU,MAAM,CAACE,MAD1B;AAENX,MAAAA,WAAW,EAAEQ,KAAK,CAACR;AAFb,KAAP;AAIA;;AAGD,MAAGS,MAAM,CAACC,IAAP,KAAgB,WAAnB,EAAgC;AAC/B,WAAO;AACNX,MAAAA,OAAO,EAAES,KAAK,CAACT,OAAN,GAAgB,CADnB;AAENC,MAAAA,WAAW,EAAEQ,KAAK,CAACR;AAFb,KAAP;AAIA;;AAED,MAAGS,MAAM,CAACC,IAAP,KAAgB,QAAnB,EAA6B;AAC5B,WAAO;AACNV,MAAAA,WAAW,EAAE,CAACQ,KAAK,CAACR,WADd;AAEND,MAAAA,OAAO,EAAES,KAAK,CAACT;AAFT,KAAP;AAIA;;AACD,SAAOS,KAAP;AAEA,CAjCD;;AAmCA,MAAMI,KAAK,GAAGhB,WAAW,CAACW,cAAD,CAAzB;AAEA,eAAeK,KAAf","sourcesContent":["import {createStore} from 'redux';\nimport {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter: true };\n\ncreateSlice({\n\tname: 'counter',\n\tinitialState: initialState,\n\treducers: {\n\t\tincrement() {},\n\t\tdecrement() {},\n\t\tincrease() {},\n\t\ttoggleCounter() {}\n\t}\n})\n\nconst counterReducer = (state=initialState, action) => {\n\n\t//We override the old state, return brand new object, not mutate it or change existing state\n\tif(action.type === 'increment') {\n\t\treturn {\n\t\t\tcounter: state.counter + 1,\n\t\t\tshowCounter: state.showCounter\n\t\t}\n\t}\n\n\tif(action.type === 'increase') {\n\t\treturn {\n\t\t\tcounter: state.counter + action.amount,\n\t\t\tshowCounter: state.showCounter\n\t\t}\n\t}\n\n\n\tif(action.type === 'decrement') {\n\t\treturn {\n\t\t\tcounter: state.counter - 1,\n\t\t\tshowCounter: state.showCounter\n\t\t}\n\t}\n\n\tif(action.type === 'toggle') {\n\t\treturn {\n\t\t\tshowCounter: !state.showCounter,\n\t\t\tcounter: state.counter\n\t\t}\n\t}\n\treturn state;\n\n}\n\nconst store = createStore(counterReducer);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}